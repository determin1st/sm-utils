{
  "overview": "Lambdas are a special-cased data type for use in interpolations and\nsections.\n\nWhen used as the data value for an Interpolation tag, the lambda MUST be\ntreatable as an arity 0 function, and invoked as such.  The returned value\nMUST be rendered against the default delimiters, then interpolated in place\nof the lambda.\n\nWhen used as the data value for a Section tag, the lambda MUST be treatable\nas an arity 1 function, and invoked as such (passing a String containing the\nunprocessed section contents).  The returned value MUST be rendered against\nthe current delimiters, then interpolated in place of the section.\n",
  "speed": 0,
  "tests": [
    {
      "name": "Interpolation",
      "desc": "A lambda's return value should be interpolated.",
      "data": {
        "lambda": "return \"world\";"
      },
      "template": "Hello, {{lambda}}!",
      "expected": "Hello, world!"
    },
    {
      "name": "Interpolation - Expansion",
      "desc": "A lambda's return value should be parsed.",
      "data": {
        "planet": "world",
        "lambda": "return \"{{planet}}\";"
      },
      "template": "Hello, {{lambda}}!",
      "expected": "Hello, world!"
    },
    {
      "skip":1,
      "name": "Interpolation - Alternate Delimiters",
      "desc": "A lambda's return value should parse with the default delimiters.",
      "data": {
        "planet": "world",
        "lambda": "return \"|planet| => {{planet}}\";"
      },
      "template": "{{= | | =}}\nHello, (|&lambda|)!",
      "expected": "Hello, (|planet| => world)!"
    },
    {
      "name": "Interpolation - Multiple Calls",
      "desc": "Interpolated lambdas should not be cached.",
      "data": {
        "lambda": "global $calls; return ++$calls;"
      },
      "template": "{{lambda}} == {{lambda}} == {{lambda}}",
      "expected": "1 == 2 == 3"
    },
    {
      "name": "Escaping",
      "desc": "Lambda results should be appropriately escaped.",
      "data": {
        "lambda": "return \">\";"
      },
      "template": "<{{lambda}}{{&lambda}}",
      "expected": "<&gt;>"
    },
    {
      "name": "Section",
      "desc": "Lambdas used for sections should receive the raw section string.",
      "data": {
        "x": "Error!",
        "lambda": "return ($text == \"{{x}}\") ? \"yes\" : \"no\";"
      },
      "template": "<{{#lambda}}{{x}}{{/lambda}}>",
      "expected": "<yes>"
    },
    {
      "name": "Section - Expansion",
      "desc": "Lambdas used for sections should have their results parsed.",
      "data": {
        "planet": "Earth",
        "lambda": "return $text . \"{{planet}}\" . $text;"
      },
      "template": "<{{#lambda}}-{{/lambda}}>",
      "expected": "<-Earth->"
    },
    {
      "skip":1,
      "name": "Section - Alternate Delimiters",
      "desc": "Lambdas used for sections should parse with the current delimiters.",
      "data": {
        "planet": "Earth",
        "lambda": "return $text . \"{{planet}} => |planet|\" . $text;"
      },
      "template": "{{= | | =}}<|#lambda|-|/lambda|>",
      "expected": "<-{{planet}} => Earth->"
    },
    {
      "name": "Section - Multiple Calls",
      "desc": "Lambdas used for sections should not be cached.",
      "data": {
        "lambda": "return \"__\" . $text . \"__\";"
      },
      "template": "{{#lambda}}FILE{{/lambda}} != {{#lambda}}LINE{{/lambda}}",
      "expected": "__FILE__ != __LINE__"
    },
    {
      "skip":1,
      "name": "Inverted Section",
      "desc": "Lambdas used for inverted sections should be considered truthy.",
      "data": {
        "static": "static",
        "lambda": "return false;"
      },
      "template": "<{{^lambda}}{{static}}{{/lambda}}>",
      "expected": "<>"
    }
  ]
}
